function e(e,t,r,i){Object.defineProperty(e,t,{get:r,set:i,enumerable:!0,configurable:!0})}var t=globalThis.parcelRequire8969,r=t.register;r("7fGLp",function(r,i){e(r.exports,"default",()=>o);var n=t("9PhBB"),l=t("dJzRF");class o extends l.default{decodeBlock(e){return(0,n.inflate)(new Uint8Array(e)).buffer}}}),r("dJzRF",function(r,i){e(r.exports,"default",()=>l);var n=t("fPkiP");class l{async decode(e,t){let r=await this.decodeBlock(t),i=e.Predictor||1;if(1!==i){let t=!e.StripOffsets,l=t?e.TileWidth:e.ImageWidth,o=t?e.TileLength:e.RowsPerStrip||e.ImageLength;return(0,n.applyPredictor)(r,i,l,o,e.BitsPerSample,e.PlanarConfiguration)}return r}}}),r("fPkiP",function(t,r){e(t.exports,"applyPredictor",()=>i);function i(e,t,r,i,n,l){if(!t||1===t)return e;for(let e=0;e<n.length;++e){if(n[e]%8!=0)throw Error("When decoding with predictor, only multiple of 8 bits are supported.");if(n[e]!==n[0])throw Error("When decoding with predictor, all samples must have the same size.")}let o=n[0]/8,a=2===l?1:n.length;for(let l=0;l<i;++l){let i;if(l*a*r*o>=e.byteLength)break;if(2===t){switch(n[0]){case 8:i=new Uint8Array(e,l*a*r*o,a*r*o);break;case 16:i=new Uint16Array(e,l*a*r*o,a*r*o/2);break;case 32:i=new Uint32Array(e,l*a*r*o,a*r*o/4);break;default:throw Error(`Predictor 2 not allowed with ${n[0]} bits per sample.`)}!function(e,t){let r=e.length-t,i=0;do{for(let r=t;r>0;r--)e[i+t]+=e[i],i++;r-=t}while(r>0)}(i,a,o)}else 3===t&&function(e,t,r){let i=0,n=e.length,l=n/r;for(;n>t;){for(let r=t;r>0;--r)e[i+t]+=e[i],++i;n-=t}let o=e.slice();for(let t=0;t<l;++t)for(let i=0;i<r;++i)e[r*t+i]=o[(r-i-1)*l+t]}(i=new Uint8Array(e,l*a*r*o,a*r*o),a,o)}return e}});